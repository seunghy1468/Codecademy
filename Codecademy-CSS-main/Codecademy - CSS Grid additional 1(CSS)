# CSS : CSS Grid additional property

header, footer {
  background-color: #ffa500;
  text-align: center;
  min-width: 500px;
}

main {
  display: grid;
  grid-template-columns: 250px 250px;
  grid-template-rows: repeat(3, 450px);
  grid-gap: 20px;
  margin-top: 44px;
  grid-auto-rows: 500px;
  justify-items: center;    // 이렇게 적용해도 grid가 가운데에 오지 않는다. 열 안에서 정의되기 때문이다. (height에 여유가 없기 때문에)
  justify-content: center;  // 이렇게 적용하면 전체 grid가 가운데에 배치된다. 행 축에서 정의되기 때문이다.
  align-items: stretch;     // 이렇게 적용하면 전체 height에 맞게 grid가 같은 크기로 배열된다.
  
  //height: 1600px;         // grid 공간이 더 커짐
  align-content: center;    // grid 위, 아래 일정한 크기의 공간이 생김 (grid들이 가운데로 배열됨)
  grid-auto-rows: 500px;
  grid-auto-flow: column;   // 이렇게 적용하면 implicit grid 생성해야 하는 방향 지정됨 (column 방향)
}

h2 {
  font-family: Poppins;
  font-size: 18px;
  font-weight: 600;
  letter-spacing: 0.3px;
  text-align: left;
  color: #ffa500;
  padding: 10px 0px 10px 10px;
}

img {
  width: 100%;
  height: auto;
}

.recipe {
  box-shadow: 0 1px 1px 0 rgba(0, 0, 0, 0.5);
  width: 200px; // main은 250px 인데 recipe는 200px이므로 200px에 맞게 grid가 설정된다.
}

.a {
  align-self: end; // class 가 a 인 grid만 열 축 상에서 end로 위치 변화 
}

.c {
  justify-self: start; class가 c인 grid만 행 축 상에서 start로 위치 
}

.time {
  padding-left: 10px;
  padding-top: 10px;
  width: 20px;
  height: auto;
}

.mins {
  display: inline-block;
  font-family: Poppins;
  font-size: 14px;
  font-weight: 500;
  letter-spacing: 0.3px;
  text-align: left;
  color: #4a4a4a;
  position: relative;
  bottom: 5px;
}

.description {
  font-family: Work Sans;
  font-size: 14px;
  font-weight: 300;
  line-height: 1.29;
  letter-spacing: 0.1px;
  text-align: left;
  color: #4a4a4a;
  padding: 10px 0px 10px 10px;
  border-top: 1px solid #4a4a4a;
}

.logo {
  width: 115px;
  height: 21.1px;
  object-fit: contain;
  padding: 20px;
}

.container {
  min-width: 500px;
  margin: auto;
}

footer {
  margin-top: 44px;
}
